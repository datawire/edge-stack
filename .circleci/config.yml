# Generated by `./generate`. DO NOT EDIT.

version: 2.1
jobs:
  "aes-generate":
    executor: aes-linux
    steps:
    - aes-post-checkout-git-config
    - job-generate
  "aes-chart":
    executor: aes-linux
    steps:
    - job-chart
  "aes-chart-publish":
    executor: aes-linux
    steps:
    - job-chart-publish
  "aes-manifest-publish":
    environment:
      BUMP_STABLE: "true"
    executor: "aes-linux"
    steps:
    - job-manifests-publish
_anchors:
  # chart release will create a tag IFF there are changes to the chart version
  "filter-chart-release-only": &filter-chart-release-only
    filters:
      tags:
        only: /^chart\-v[0-9]+\.[0-9]+\.[0-9]+-(ea)?$/
      branches:
        ignore: /.*/
  # All of these filters assume that "Only build pull requests" is turned on at
  # https://app.circleci.com/settings/project/github/datawire/ambassador/advanced

  "filter-prerelease-only": &filter-prerelease-only
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+-(rc|ea)\.[0-9]+$/
      branches:
        ignore: /.*/
  "filter-rc-only": &filter-rc-only
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$/
      branches:
        ignore: /.*/
  "filter-ga-only": &filter-ga-only
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+(-ea)?$/
      branches:
        ignore: /.*/
workflows:
  "AES: Dev":
    # Run this workflow on just 'master' and PRs.
    jobs:
    - "aes-generate":
        name: "aes-dev-generate"
    - "aes-chart":
        name: "aes-dev-chart"
  "AES: Chart Release":
    jobs:
    - "aes-chart-publish":
        !!merge <<: *filter-chart-release-only
        name: "aes-release-chart"
  "AES: Manifests Release":
    jobs:
    - "aes-manifest-publish":
        !!merge <<: *filter-chart-release-only
        name: "aes-release-manifests-publish"
commands:
  job-chart:
    steps:
    - amb-linux-install
    - amb-checkout
    - skip-if-no-changes:
        to: charts/edge-stack
    - install-k3d
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - run: make chart/test
  job-chart-publish:
    steps:
    - amb-linux-install
    - amb-checkout
    - amb-skip-if-bad-chart-version
    - install-k3d
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - run: make chart/test
    - run: make release/chart/ga-push
  job-manifests-publish:
    steps:
    - amb-linux-install
    - amb-checkout
    - amb-config-registry
    - run:
        name: "Publishing manifests"
        command: |
          make push-manifests
  job-publish-rc-manifests:
    steps:
    - amb-linux-install
    - amb-checkout
    - amb-config-registry
    - run:
        name: "Publishing manifests for RC"
        command: |
          make release/rc-manifests
  job-generate:
    steps:
    # setup
    - amb-linux-install
    - amb-checkout
    # We might need to be logged in the registry to pull the Envoy
    # image or the builder-base image.
    - amb-config-registry
    - install-helm
    - run: make generate
    - dirty-check
    - run: make generate
    - dirty-check
  amb-linux-install:
    steps:
    - install-python:
        executor-key: "202008-01"
    - pip-install:
        packages: awscli packaging
    - install-go
    - install-kubectl
    - install-node
  amb-save-workspace:
    steps:
    - persist_to_workspace:
        root: /home/circleci/project
        paths:
        - "."
  amb-attach-workspace:
    steps:
    - attach_workspace:
        at: /home/circleci/project
  amb-skip-if-no-code-changes:
    steps:
    - skip-if-only-changes:
        to: (charts/ambassador\|docs/\|*.md)
  amb-checkout:
    steps:
    - checkout:
        path: ~/project
  amb-login-registry:
    steps:
    - run:
        name: "Docker login"
        command: |
          if [[ -n "$DOCKER_BUILD_USERNAME" && -n "DOCKER_BUILD_PASSWORD" ]]; then
            tries=0
            while true; do
              if [ "$tries" -gt 10 ] ; then
                circleci step halt
              fi

              fail=0
              out=$(docker login -u="${DOCKER_BUILD_USERNAME}" -p="${DOCKER_BUILD_PASSWORD}" "${DEV_REGISTRY%%/*}") || fail=1
              if [ "$fail" == "0" ] ; then
                break
              fi

              echo $out
              if echo "$out" | grep "503 Service Unavailable" ; then
                ((tries++))
                sleep 30
              else
                circleci step halt
              fi
            done
          fi
  amb-config-registry:
    steps:
    - amb-login-registry
  amb-config-cluster-and-registry:
    steps:
    - amb-login-registry
    - run:
        name: "Configure Kubernetes cluster and Docker registry"
        command: |
          k3d cluster create \
                  --k3s-server-arg "--no-deploy=servicelb" \
                  --k3s-server-arg "--no-deploy=traefik" \
                  --k3s-server-arg "--kubelet-arg=max-pods=255"
          echo >>"$BASH_ENV" 'export DEV_KUBECONFIG=~/.kube/config'
          echo >>"$BASH_ENV" 'unset BASH_ENV'
  amb-config-helm:
    steps:
    - run:
        name: "Configure Helm repository"
        command: |
          helm repo add datawire https://www.getambassador.io
  amb-save-logs:
    steps:
    - run:
        name: "Gather test logs"
        when: always
        command: |
          rsync \
            --prune-empty-dirs --archive --include='*/' \
            --include='*.xml' \
            --include='*.tap' \
            --include='*.log' \
            --include='Test*.webm' \
            --exclude='*' \
            . \
            /tmp/test-logs
          if test -d ~/.cache/telepresence/logs; then
            rsync \
              --archive \
              ~/.cache/telepresence/logs \
              /tmp/test-logs/telepresence-logs
          fi
    - store_artifacts:
        name: "Store test logs"
        path: /tmp/test-logs
        destination: test-logs
    - store_artifacts:
        name: "Store coverage"
        path: /tmp/cov_html
        destination: coverage
    - run:
        name: "Gather pod logs"
        when: always
        command: |
          mkdir -p /tmp/pod-logs
          podsfile=/tmp/pod-logs/all-pods.txt
          (kubectl get pods --all-namespaces -ocustom-columns="name:.metadata.name,namespace:.metadata.namespace" --no-headers || true) > $podsfile
          (kubectl describe pods --all-namespaces || true) > /tmp/pod-logs/all-pods-described.txt
          (kubectl describe nodes || true) > /tmp/pod-logs/all-nodes-described.txt

          (journalctl -u k3s || true) > /tmp/pod-logs/k3s-systemd.log
          (docker logs $(docker ps -a | grep rancher/k3s | awk '{print $1}') 2>&1 || true) > /tmp/pod-logs/k3s.log

          cat $podsfile | while IFS= read -r line; do
            name=$(echo $line | awk '{print $1}')
            ns=$(echo $line | awk '{print $2}')
            nsdir=/tmp/pod-logs/${ns}/
            mkdir -p $nsdir
            outfile=${nsdir}/${name}-pod.log
            (kubectl logs -n $ns $name > $outfile || echo "FAILED, status $ret, continuing...") || true
          done
    - store_artifacts:
        name: "Store pod logs"
        path: /tmp/pod-logs
        destination: pod-logs
  amb-skip-if-bad-chart-version:
    steps:
    - run:
        name: "Diff changes"
        command: |
          thisversion=$(grep version: charts/edge-stack/Chart.yaml | awk ' { print $2 }')

          if [[ "<< pipeline.git.tag >>" != "chart-v${thisversion}" ]]; then
            echo "Chart version ${thisversion} doesn't match tag << pipeline.git.tag >>; aborting"
            exit 1
          fi
  install-gotestsum:
    steps:
    - run:
        name: "Install gotestsum"
        command: |
          go get gotest.tools/gotestsum
  install-redis:
    steps:
    - run:
        name: "Install Redis"
        command: |
          sudo apt update -y
          sudo apt install -y redis-server
  install-k3d:
    parameters:
      version:
        type: string
        default: "v3.4.0"
    steps:
    - run:
        name: "Install K3D << parameters.version >>"
        command: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | TAG=<< parameters.version >>  bash
  pip-install:
    parameters:
      packages:
        type: string
    steps:
    - run: |
        if [[ "$(which pip3)" == *pyenv* ]]; then
          pip3 install << parameters.packages >>
        else
          sudo pip3 install << parameters.packages >>
        fi
  install-node:
    parameters:
      version:
        type: string
        default: "14"
    steps:
    - run:
        name: "Install Node << parameters.version >>"
        command: |
          echo 'export NVM_DIR=/opt/circleci/.nvm' >> ${BASH_ENV}
          echo 'source $NVM_DIR/nvm.sh' >> ${BASH_ENV}

          export NVM_DIR=/opt/circleci/.nvm
          source $NVM_DIR/nvm.sh
          if ! nvm ls << parameters.version >> > /dev/null; then nvm install << parameters.version >>; fi
          nvm alias default << parameters.version >>
  install-helm:
    parameters:
      version:
        type: string
        default: "v3.4.1"
    steps:
    - run:
        name: "Install Helm << parameters.version >>"
        command: |
          set -x
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh --version << parameters.version >>
          rm ./get_helm.sh
  install-go:
    parameters:
      version:
        type: string
        default: "1.15"
    steps:
    - run:
        name: "Install Go << parameters.version >>"
        command: |
          set -x
          if [[ $OS == Windows_NT ]]; then
            curl --retry 5 --retry-delay 5 https://dl.google.com/go/go<< parameters.version >>.windows-amd64.zip -o /tmp/go.zip
            mv /c/go /c/go-112
            unzip -q /tmp/go.zip -d /c/
          else
            curl --retry 5 --retry-delay 5 https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz -o /tmp/go.tar.gz
            tar -C /tmp -xzf /tmp/go.tar.gz
            echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
            if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
              echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
            fi
            . "$BASH_ENV"
          fi
          go version
  install-kubectl:
    parameters:
      version:
        type: string
        default: "1.14.0"
    steps:
    - run:
        name: "Install kubectl << parameters.version >>"
        command: |
          curl --retry 5 --retry-delay 5 -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
          sudo install /tmp/kubectl /usr/local/bin/kubectl
  install-yarn:
    steps:
    - run:
        name: "Install Yarn"
        command: |
          curl --retry 5 --retry-delay 5 -o- -L https://yarnpkg.com/install.sh | bash
          echo 'PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> "$BASH_ENV"
  install-python:
    parameters:
      version:
        type: string
        default: "3.8.5"
      pip-version:
        type: string
        default: "20.1.1"
      executor-key:
        type: string
    steps:
    - restore_cache:
        name: "Restore Python install cache"
        key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>-<< parameters.pip-version
          >>"
    - run:
        name: "Install Python << parameters.version >>"
        command: |
          set -x
          pyenv versions
          pyenv install --skip-existing << parameters.version >>
          pyenv global 2.7.18 << parameters.version >>
          pyenv versions
          pip3 install pip==<< parameters.pip-version>>
    - save_cache:
        name: "Save Python install cache"
        key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>-<< parameters.pip-version
          >>"
        paths:
        - "/opt/circleci/.pyenv"
  dirty-check:
    steps:
    - run:
        name: "Dirty check"
        command: |
          # On Windows, `git status` doesn't record no-op
          # line-ending changes in to the index, so things show as
          # dirty even if they aren't.  Trying to `add` them does
          # trigger the appropriate index update.  So do a `git add`
          # *before* the `git status --porcelain` to work around
          # Windows being terrible; we'd otherwise put the `git add`
          # inside of the `if` block to help generate better output
          # for `git diff`.
          git add .
          if [[ -n "$(git status --porcelain)" ]]; then
             PAGER= git diff --cached
             exit 1
          fi
  skip-if-no-changes:
    parameters:
      to:
        description: A POSIX ERE (grep -E regex) that matches which filenames to check
          for changes in
        type: string
    steps:
    - run:
        name: "Diff changes"
        command: |
          if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
            echo "There is no base_revision, therefore no changes"
            exit 0
          fi

          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE --name-only

          if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -E "<< parameters.to >>") == "" ]]; then
            echo "Halting this CircleCI job because code in the following paths have not changed:"
            echo "<< parameters.to >>"
            circleci step halt
          fi
  skip-if-only-changes:
    parameters:
      to:
        description: A POSIX ERE (grep -E regex) that matches which filenames to check
          for changes in
        type: string
    steps:
    - run:
        name: "Diff changes"
        command: |
          if [[ "<< pipeline.git.base_revision >>" == "" ]]; then
            echo "There is no base_revision, therefore no changes"
            exit 0
          fi

          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE --name-only

          if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -v -E "<< parameters.to >>") == "" ]]; then
            echo "Halting this CircleCI job because only code in the following paths has changed:"
            echo "<< parameters.to >>"
            circleci step halt
          fi
executors:
  aes-linux:
    machine:
      image: "ubuntu-2004:202008-01"
    working_directory: ~/project
